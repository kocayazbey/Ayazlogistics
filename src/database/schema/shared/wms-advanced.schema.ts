import { pgTable, uuid, varchar, text, integer, timestamp, boolean, jsonb, numeric, index } from 'drizzle-orm/pg-core';

export const zones = pgTable('zones', {
  id: uuid('id').primaryKey().defaultRandom(),
  code: varchar('code', { length: 10 }).notNull(),
  name: varchar('name', { length: 100 }).notNull(),
  warehouseId: uuid('warehouse_id').notNull(),
  tenantId: uuid('tenant_id').notNull(),
  type: varchar('type', { length: 20 }).notNull(),
  priority: integer('priority').default(50),
  velocityClass: varchar('velocity_class', { length: 1 }),
  accessType: varchar('access_type', { length: 20 }),
  maxHeight: numeric('max_height', { precision: 5, scale: 2 }),
  aisleWidth: numeric('aisle_width', { precision: 5, scale: 2 }),
  pickingStrategy: varchar('picking_strategy', { length: 20 }),
  replenishmentType: varchar('replenishment_type', { length: 20 }),
  allowedEquipment: jsonb('allowed_equipment'),
  restrictions: jsonb('restrictions'),
  aisles: jsonb('aisles'),
  metadata: jsonb('metadata'),
  active: boolean('active').default(true),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
  createdBy: uuid('created_by'),
}, (table) => ({
  codeIdx: index('zones_code_idx').on(table.code),
  warehouseIdx: index('zones_warehouse_idx').on(table.warehouseId),
}));

export const pickingRoutes = pgTable('picking_routes', {
  id: uuid('id').primaryKey().defaultRandom(),
  code: varchar('code', { length: 20 }).notNull(),
  name: varchar('name', { length: 100 }).notNull(),
  warehouseId: uuid('warehouse_id').notNull(),
  tenantId: uuid('tenant_id').notNull(),
  zoneSequence: jsonb('zone_sequence').notNull(),
  optimizationType: varchar('optimization_type', { length: 20 }),
  waypoints: jsonb('waypoints'),
  totalDistance: numeric('total_distance', { precision: 10, scale: 2 }),
  estimatedDuration: integer('estimated_duration'),
  active: boolean('active').default(true),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
});

export const locationGroups = pgTable('location_groups', {
  id: uuid('id').primaryKey().defaultRandom(),
  code: varchar('code', { length: 20 }).notNull(),
  name: varchar('name', { length: 100 }).notNull(),
  warehouseId: uuid('warehouse_id').notNull(),
  tenantId: uuid('tenant_id').notNull(),
  locationIds: jsonb('location_ids').notNull(),
  groupType: varchar('group_type', { length: 20 }),
  metadata: jsonb('metadata'),
  restrictions: jsonb('restrictions'),
  createdAt: timestamp('created_at').defaultNow(),
  createdBy: uuid('created_by'),
});

export const putawayStrategies = pgTable('putaway_strategies', {
  id: uuid('id').primaryKey().defaultRandom(),
  code: varchar('code', { length: 20 }).notNull(),
  name: varchar('name', { length: 100 }).notNull(),
  warehouseId: uuid('warehouse_id').notNull(),
  tenantId: uuid('tenant_id').notNull(),
  priority: integer('priority').default(50),
  rules: jsonb('rules').notNull(),
  slottingRules: jsonb('slotting_rules'),
  active: boolean('active').default(true),
  createdAt: timestamp('created_at').defaultNow(),
  createdBy: uuid('created_by'),
});

export const pickingCarts = pgTable('picking_carts', {
  id: uuid('id').primaryKey().defaultRandom(),
  cartNumber: varchar('cart_number', { length: 20 }).notNull().unique(),
  warehouseId: uuid('warehouse_id').notNull(),
  tenantId: uuid('tenant_id').notNull(),
  cartType: varchar('cart_type', { length: 20 }),
  capacity: integer('capacity'),
  currentLoad: integer('current_load').default(0),
  status: varchar('status', { length: 20 }).default('available'),
  assignedPicker: uuid('assigned_picker'),
  currentLocation: varchar('current_location', { length: 50 }),
  orders: jsonb('orders'),
  items: jsonb('items'),
  metadata: jsonb('metadata'),
  lastUpdate: timestamp('last_update').defaultNow(),
  createdAt: timestamp('created_at').defaultNow(),
});

export const forkliftTasks = pgTable('forklift_tasks', {
  id: uuid('id').primaryKey().defaultRandom(),
  taskNumber: varchar('task_number', { length: 30 }).notNull().unique(),
  warehouseId: uuid('warehouse_id').notNull(),
  tenantId: uuid('tenant_id').notNull(),
  taskType: varchar('task_type', { length: 20 }).notNull(),
  forkliftType: varchar('forklift_type', { length: 10 }).notNull(),
  fromLocation: varchar('from_location', { length: 50 }),
  toLocation: varchar('to_location', { length: 50 }),
  palletId: uuid('pallet_id'),
  productInfo: jsonb('product_info'),
  priority: varchar('priority', { length: 10 }).default('normal'),
  status: varchar('status', { length: 20 }).default('pending'),
  assignedTo: uuid('assigned_to'),
  forkliftId: uuid('forklift_id'),
  estimatedDuration: integer('estimated_duration'),
  actualDuration: integer('actual_duration'),
  startedAt: timestamp('started_at'),
  completedAt: timestamp('completed_at'),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at').defaultNow(),
  createdBy: uuid('created_by'),
}, (table) => ({
  statusIdx: index('forklift_tasks_status_idx').on(table.status),
  assignedIdx: index('forklift_tasks_assigned_idx').on(table.assignedTo),
}));

export const narrowAisles = pgTable('narrow_aisles', {
  id: uuid('id').primaryKey().defaultRandom(),
  aisleCode: varchar('aisle_code', { length: 20 }).notNull(),
  warehouseId: uuid('warehouse_id').notNull(),
  tenantId: uuid('tenant_id').notNull(),
  width: numeric('width', { precision: 5, scale: 2 }),
  maxHeight: numeric('max_height', { precision: 5, scale: 2 }),
  allowedEquipment: jsonb('allowed_equipment'),
  trafficControl: varchar('traffic_control', { length: 20 }),
  entryPoints: jsonb('entry_points'),
  exitPoints: jsonb('exit_points'),
  currentStatus: jsonb('current_status'),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at').defaultNow(),
});

export const cartons = pgTable('cartons', {
  id: uuid('id').primaryKey().defaultRandom(),
  cartonNumber: varchar('carton_number', { length: 30 }).notNull().unique(),
  warehouseId: uuid('warehouse_id').notNull(),
  tenantId: uuid('tenant_id').notNull(),
  orderNumber: varchar('order_number', { length: 50 }),
  cartonType: varchar('carton_type', { length: 20 }),
  status: varchar('status', { length: 20 }).default('open'),
  items: jsonb('items'),
  weight: numeric('weight', { precision: 10, scale: 3 }),
  dimensions: jsonb('dimensions'),
  trackingNumber: varchar('tracking_number', { length: 50 }),
  carrierCode: varchar('carrier_code', { length: 20 }),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at').defaultNow(),
  sealedAt: timestamp('sealed_at'),
  shippedAt: timestamp('shipped_at'),
  createdBy: uuid('created_by'),
}, (table) => ({
  statusIdx: index('cartons_status_idx').on(table.status),
  orderIdx: index('cartons_order_idx').on(table.orderNumber),
}));

export const yardVehicles = pgTable('yard_vehicles', {
  id: uuid('id').primaryKey().defaultRandom(),
  plate: varchar('plate', { length: 20 }).notNull(),
  warehouseId: uuid('warehouse_id').notNull(),
  tenantId: uuid('tenant_id').notNull(),
  vehicleType: varchar('vehicle_type', { length: 20 }),
  carrier: varchar('carrier', { length: 100 }),
  driverName: varchar('driver_name', { length: 100 }),
  driverPhone: varchar('driver_phone', { length: 20 }),
  driverLicense: varchar('driver_license', { length: 50 }),
  purpose: varchar('purpose', { length: 20 }),
  status: varchar('status', { length: 20 }).default('waiting'),
  arrivalTime: timestamp('arrival_time').defaultNow(),
  departureTime: timestamp('departure_time'),
  appointmentNumber: varchar('appointment_number', { length: 30 }),
  assignedDock: varchar('assigned_dock', { length: 10 }),
  yardLocation: varchar('yard_location', { length: 20 }),
  metadata: jsonb('metadata'),
});

export const docks = pgTable('docks', {
  id: uuid('id').primaryKey().defaultRandom(),
  dockNumber: varchar('dock_number', { length: 10 }).notNull(),
  warehouseId: uuid('warehouse_id').notNull(),
  tenantId: uuid('tenant_id').notNull(),
  dockType: varchar('dock_type', { length: 20 }),
  vehicleTypes: jsonb('vehicle_types'),
  maxVehicleSize: jsonb('max_vehicle_size'),
  features: jsonb('features'),
  operatingHours: jsonb('operating_hours'),
  status: varchar('status', { length: 20 }).default('available'),
  currentVehicle: uuid('current_vehicle'),
  currentOperation: varchar('current_operation', { length: 20 }),
  scheduledVehicles: jsonb('scheduled_vehicles'),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at').defaultNow(),
});

export const carriers = pgTable('carriers', {
  id: uuid('id').primaryKey().defaultRandom(),
  code: varchar('code', { length: 20 }).notNull(),
  name: varchar('name', { length: 100 }).notNull(),
  tenantId: uuid('tenant_id').notNull(),
  type: varchar('type', { length: 20 }),
  contactPerson: varchar('contact_person', { length: 100 }),
  contactEmail: varchar('contact_email', { length: 100 }),
  contactPhone: varchar('contact_phone', { length: 20 }),
  address: text('address'),
  scacCode: varchar('scac_code', { length: 4 }),
  dotNumber: varchar('dot_number', { length: 20 }),
  rating: numeric('rating', { precision: 3, scale: 2 }),
  active: boolean('active').default(true),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at').defaultNow(),
});

export const drivers = pgTable('drivers', {
  id: uuid('id').primaryKey().defaultRandom(),
  employeeNumber: varchar('employee_number', { length: 20 }),
  firstName: varchar('first_name', { length: 50 }).notNull(),
  lastName: varchar('last_name', { length: 50 }).notNull(),
  phone: varchar('phone', { length: 20 }),
  email: varchar('email', { length: 100 }),
  licenseNumber: varchar('license_number', { length: 50 }).notNull(),
  licenseExpiry: timestamp('license_expiry'),
  licenseClass: varchar('license_class', { length: 10 }),
  carrierId: uuid('carrier_id'),
  tenantId: uuid('tenant_id').notNull(),
  status: varchar('status', { length: 20 }).default('active'),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at').defaultNow(),
});

export const barcodeStructures = pgTable('barcode_structures', {
  id: uuid('id').primaryKey().defaultRandom(),
  code: varchar('code', { length: 20 }).notNull(),
  name: varchar('name', { length: 100 }).notNull(),
  tenantId: uuid('tenant_id').notNull(),
  barcodeType: varchar('barcode_type', { length: 20 }),
  pattern: varchar('pattern', { length: 200 }),
  segments: jsonb('segments'),
  validationRules: jsonb('validation_rules'),
  active: boolean('active').default(true),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at').defaultNow(),
});

export const labelTemplates = pgTable('label_templates', {
  id: uuid('id').primaryKey().defaultRandom(),
  code: varchar('code', { length: 20 }).notNull(),
  name: varchar('name', { length: 100 }).notNull(),
  tenantId: uuid('tenant_id').notNull(),
  labelType: varchar('label_type', { length: 20 }),
  format: varchar('format', { length: 10 }),
  templateContent: text('template_content'),
  width: integer('width'),
  height: integer('height'),
  dpi: integer('dpi').default(203),
  active: boolean('active').default(true),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at').defaultNow(),
});

export const workOrders = pgTable('work_orders', {
  id: uuid('id').primaryKey().defaultRandom(),
  workOrderNumber: varchar('work_order_number', { length: 30 }).notNull().unique(),
  tenantId: uuid('tenant_id').notNull(),
  productId: uuid('product_id').notNull(),
  plannedQuantity: integer('planned_quantity').notNull(),
  producedQuantity: integer('produced_quantity').default(0),
  status: varchar('status', { length: 20 }).default('planned'),
  productionLine: varchar('production_line', { length: 50 }),
  startDate: timestamp('start_date'),
  endDate: timestamp('end_date'),
  completedAt: timestamp('completed_at'),
  pallets: jsonb('pallets'),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at').defaultNow(),
  createdBy: uuid('created_by'),
});

export const productionHandovers = pgTable('production_handovers', {
  id: uuid('id').primaryKey().defaultRandom(),
  handoverNumber: varchar('handover_number', { length: 30 }).notNull().unique(),
  workOrderId: uuid('work_order_id').notNull(),
  palletId: uuid('pallet_id').notNull(),
  tenantId: uuid('tenant_id').notNull(),
  productId: uuid('product_id').notNull(),
  quantity: integer('quantity').notNull(),
  productionDate: timestamp('production_date').notNull(),
  expiryDate: timestamp('expiry_date'),
  lotNumber: varchar('lot_number', { length: 50 }),
  batchNumber: varchar('batch_number', { length: 50 }),
  qualityChecked: boolean('quality_checked').default(false),
  handoverStatus: varchar('handover_status', { length: 20 }).default('pending'),
  receivingLocation: varchar('receiving_location', { length: 50 }),
  approvedBy: uuid('approved_by'),
  approvedAt: timestamp('approved_at'),
  rejectedReason: text('rejected_reason'),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at').defaultNow(),
  createdBy: uuid('created_by'),
});

export const workflowParameters = pgTable('workflow_parameters', {
  id: uuid('id').primaryKey().defaultRandom(),
  code: varchar('code', { length: 50 }).notNull().unique(),
  name: varchar('name', { length: 100 }).notNull(),
  tenantId: uuid('tenant_id').notNull(),
  warehouseId: uuid('warehouse_id'),
  category: varchar('category', { length: 30 }),
  dataType: varchar('data_type', { length: 20 }).notNull(),
  defaultValue: jsonb('default_value'),
  currentValue: jsonb('current_value'),
  possibleValues: jsonb('possible_values'),
  description: text('description'),
  affectedOperations: jsonb('affected_operations'),
  validationRules: jsonb('validation_rules'),
  active: boolean('active').default(true),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
  updatedBy: uuid('updated_by'),
});

export const workflowRules = pgTable('workflow_rules', {
  id: uuid('id').primaryKey().defaultRandom(),
  code: varchar('code', { length: 50 }).notNull(),
  name: varchar('name', { length: 100 }).notNull(),
  tenantId: uuid('tenant_id').notNull(),
  warehouseId: uuid('warehouse_id'),
  priority: integer('priority').default(50),
  conditions: jsonb('conditions').notNull(),
  actions: jsonb('actions').notNull(),
  active: boolean('active').default(true),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
});

export const supervisorActivities = pgTable('supervisor_activities', {
  id: uuid('id').primaryKey().defaultRandom(),
  activityNumber: varchar('activity_number', { length: 30 }).notNull().unique(),
  supervisorId: uuid('supervisor_id').notNull(),
  tenantId: uuid('tenant_id').notNull(),
  warehouseId: uuid('warehouse_id').notNull(),
  activityType: varchar('activity_type', { length: 50 }).notNull(),
  targetEntity: varchar('target_entity', { length: 50 }),
  targetId: uuid('target_id'),
  action: varchar('action', { length: 50 }),
  oldValue: jsonb('old_value'),
  newValue: jsonb('new_value'),
  reason: text('reason'),
  requiresApproval: boolean('requires_approval').default(false),
  approvedBy: uuid('approved_by'),
  approvedAt: timestamp('approved_at'),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at').defaultNow(),
}, (table) => ({
  supervisorIdx: index('supervisor_activities_supervisor_idx').on(table.supervisorId),
  typeIdx: index('supervisor_activities_type_idx').on(table.activityType),
}));

export const countPlans = pgTable('count_plans', {
  id: uuid('id').primaryKey().defaultRandom(),
  planNumber: varchar('plan_number', { length: 30 }).notNull().unique(),
  warehouseId: uuid('warehouse_id').notNull(),
  tenantId: uuid('tenant_id').notNull(),
  countType: varchar('count_type', { length: 30 }).notNull(),
  status: varchar('status', { length: 20 }).default('planned'),
  plannedDate: timestamp('planned_date'),
  startedAt: timestamp('started_at'),
  completedAt: timestamp('completed_at'),
  targetLocations: jsonb('target_locations'),
  targetProducts: jsonb('target_products'),
  assignedCounters: jsonb('assigned_counters'),
  results: jsonb('results'),
  variances: jsonb('variances'),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at').defaultNow(),
  createdBy: uuid('created_by'),
});

export const dockAppointments = pgTable('dock_appointments', {
  id: uuid('id').primaryKey().defaultRandom(),
  appointmentNumber: varchar('appointment_number', { length: 30 }).notNull().unique(),
  dockId: uuid('dock_id').notNull(),
  warehouseId: uuid('warehouse_id').notNull(),
  tenantId: uuid('tenant_id').notNull(),
  vehiclePlate: varchar('vehicle_plate', { length: 20 }),
  carrier: varchar('carrier', { length: 100 }),
  purpose: varchar('purpose', { length: 20 }),
  scheduledTime: timestamp('scheduled_time').notNull(),
  estimatedDuration: integer('estimated_duration'),
  status: varchar('status', { length: 20 }).default('scheduled'),
  actualArrival: timestamp('actual_arrival'),
  actualDeparture: timestamp('actual_departure'),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at').defaultNow(),
  createdBy: uuid('created_by'),
});

export const pickingEyes = pgTable('picking_eyes', {
  id: uuid('id').primaryKey().defaultRandom(),
  code: varchar('code', { length: 20 }).notNull().unique(),
  name: varchar('name', { length: 100 }).notNull(),
  warehouseId: uuid('warehouse_id').notNull(),
  tenantId: uuid('tenant_id').notNull(),
  zone: varchar('zone', { length: 10 }),
  aisle: varchar('aisle', { length: 20 }),
  status: varchar('status', { length: 20 }).default('available'),
  capacity: integer('capacity').default(50),
  currentItems: integer('current_items').default(0),
  operatorId: uuid('operator_id'),
  operatorName: varchar('operator_name', { length: 100 }),
  lastActivity: timestamp('last_activity'),
  items: jsonb('items'),
  orders: jsonb('orders'),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
}, (table) => ({
  codeIdx: index('picking_eyes_code_idx').on(table.code),
  warehouseIdx: index('picking_eyes_warehouse_idx').on(table.warehouseId),
  zoneIdx: index('picking_eyes_zone_idx').on(table.zone),
  statusIdx: index('picking_eyes_status_idx').on(table.status),
}));

export const autoCountTriggers = pgTable('auto_count_triggers', {
  id: uuid('id').primaryKey().defaultRandom(),
  code: varchar('code', { length: 30 }).notNull().unique(),
  name: varchar('name', { length: 100 }).notNull(),
  tenantId: uuid('tenant_id').notNull(),
  warehouseId: uuid('warehouse_id').notNull(),
  triggerType: varchar('trigger_type', { length: 20 }).notNull(),
  triggerValue: numeric('trigger_value', { precision: 10, scale: 2 }),
  description: text('description'),
  isActive: boolean('is_active').default(true),
  targetLocations: jsonb('target_locations'),
  targetProducts: jsonb('target_products'),
  triggerConditions: jsonb('trigger_conditions'),
  lastTriggered: timestamp('last_triggered'),
  triggerCount: integer('trigger_count').default(0),
  createdAt: timestamp('created_at').defaultNow(),
  createdBy: uuid('created_by'),
  updatedAt: timestamp('updated_at').defaultNow(),
  updatedBy: uuid('updated_by'),
}, (table) => ({
  codeIdx: index('auto_count_triggers_code_idx').on(table.code),
  tenantIdx: index('auto_count_triggers_tenant_idx').on(table.tenantId),
  warehouseIdx: index('auto_count_triggers_warehouse_idx').on(table.warehouseId),
  typeIdx: index('auto_count_triggers_type_idx').on(table.triggerType),
  activeIdx: index('auto_count_triggers_active_idx').on(table.isActive),
}));

