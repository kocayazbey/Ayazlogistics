# Multi-stage hardened Dockerfile for AyazLogistics
# Stage 1: Build stage
FROM node:18-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git

# Create non-root user for build
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY drizzle.config.ts ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY src/ ./src/
COPY drizzle/ ./drizzle/

# Build application
RUN npm run build

# Stage 2: Production stage with distroless base
FROM gcr.io/distroless/nodejs18-debian11:latest

# Security: Use distroless base image
# - No shell, no package manager, minimal attack surface
# - Only contains Node.js runtime and essential libraries

# Create non-root user (distroless images have this by default)
USER 1001

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=1001:1001 /app/dist ./dist
COPY --from=builder --chown=1001:1001 /app/node_modules ./node_modules
COPY --from=builder --chown=1001:1001 /app/package*.json ./

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/tmp && \
    chown -R 1001:1001 /app/logs /app/tmp

# Security: Set read-only root filesystem
# This will be enforced at runtime via security context

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD ["node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]

# Start application
CMD ["node", "dist/main.js"]
